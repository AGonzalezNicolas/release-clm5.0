#!/usr/bin/env perl
#=======================================================================
#
#
#=======================================================================

use Cwd;
use strict;
#use diagnostics;
use Getopt::Long;
use English;

#-----------------------------------------------------------------------------------------------

#Figure out where configure directory is and where can use the XML/Lite module from
my $ProgName;
($ProgName = $PROGRAM_NAME) =~ s!(.*)/!!; # name of program
my $ProgDir = $1;                         # name of directory where program lives

my $cmdline = "@ARGV";                    # Command line arguments to script
my $cwd = getcwd();                       # current working directory
my $cfgdir = $cwd;

if ($ProgDir) { $cfgdir = $ProgDir; }
else { $cfgdir = $cwd; }

# Defaults
my $csmdata   = "/fs/cgd/csm/inputdata";
my $source    = "CLMNCEP";
my $outfile   = "datm.streams.txt";
my $template  = "$cfgdir/datm.streams.template.xml";

sub usage {
    die <<EOF;
SYNOPSIS
     $ProgName [options]
OPTIONS

     -case       "casename"  [or -c]  Replace any template case indicators with this casename.
     -csmdata    "directory" [or -d]  Give ccsm inputdata directory. (default $csmdata)
     -datasource "source"    [or -so] Use given data source type. 
                                      (default source for -- $source)
     -domain     "filename"  [or -do] Use given filename for domain.
     -dompath    "directory" [or -dp] Use given directory name for domain.
     -filenames  "indicator" [or -f]  Use input file indicator string for filenames.
                                      (Replace following strings appropriately: )
                                        %c = Case (from above -case command line option)
                                        %do= Use domain file
                                        %y = Year (through range given from begyear to endyear)
                                        %ym = Year-Month (all 12 months through year range)
                                        %6ym = Like %ym but 6 digit year (ie. YYYYYY-MM).
                                             (can replace the 6 with any digit 1-9)

     -filepath   "path"      [or -p]  Path to where datafiles are.
                                      (Default use path in template file relative to -data)
     -help                   [or -h]  Print usage to STDOUT.
     -o          "filename"           Output streams file to create. (default $outfile)
     -silent                 [or -s]  Turns on silent mode - only fatal messages issued.
     -stdout                          Send output to STDOUT instead of output filename.
     -template   "filename"  [or -t]  Input streams template file. 
                                      (default use template -- $template)
     -test                            Test that files indicated by output streams file exist.
     -yearfirst  "year"      [or -b]  The first year to cycle input datasets over.
                                      (required input if input template has year-month indicators)
     -yearlast   "year"      [or -e]  The last year to cycle input datasets over.
                                     (required input if input template has year-month indicators)

EOF

}

#-----------------------------------------------------------------------------------------------
# Add $cfgdir to the list of paths that Perl searches for modules
my @dirs = ( $cfgdir, "$cfgdir/perl5lib", "$cfgdir/../../../../scripts/ccsm_utils/Tools"
);
unshift @INC, @dirs;
my $result = eval "require XML::Lite";
if ( ! defined($result) ) {
   die <<"EOF";
** Cannot find perl module \"XML/Lite.pm\" from directories: @dirs **
EOF
}
require XML::Lite;
require Streams::Template;

my %opts = ( template   => $template,
             domain     => "",
             csmdata    => $csmdata,
             outfile    => $outfile,
             filepath   => "",
             domainpath => "",
             filenames  => "",
             yearfirst  => -1,
             yearlast   => -1,
             help       => undef,
             case       => "",
             silent     => 0,
             stdout     => 0,
             datasource => $source,
             test       => 0,
           );

GetOptions(
    "t|template=s"              => \$opts{'template'},
    "o=s"                       => \$opts{'outfile'},
    "c|case=s"                  => \$opts{'case'},
    "p|filepath=s"              => \$opts{'filepath'},
    "d|csmdata=s"               => \$opts{'csmdata'},
    "do|domain=s"               => \$opts{'domain'},
    "f|filenames=s"             => \$opts{'filenames'},
    "b|yearfirst=s"             => \$opts{'yearfirst'},
    "e|yearlast=s"              => \$opts{'yearlast'},
    "s|silent"                  => \$opts{'silent'},
    "so|datasource=s"           => \$opts{'datasource'},
    "stdout"                    => \$opts{'stdout'},
    "test"                      => \$opts{'test'},
    "h|help"                    => \$opts{'help'},
)  or usage();

# Give usage message.
usage() if $opts{'help'};

# Check for unparsed arguments
if (@ARGV) {
    print "ERROR: unrecognized arguments: @ARGV\n";
    usage();
}
  my %inputopts;
  if ( $opts{'stdout'} ) {
     $opts{'outfile'}  = undef;
  }
  if ( $opts{'silent'} ) {
     $inputopts{'printing'} = 0;
  } else {
     $inputopts{'printing'} = 1;
  }
  $inputopts{'ProgName'}  = $ProgName;
  $inputopts{'ProgDir'}   = $cfgdir;
  $inputopts{'yearfirst'} = $opts{'yearfirst'};
  $inputopts{'yearlast'}  = $opts{'yearlast'};
  $inputopts{'filepath'}  = $opts{'filepath'};
  $inputopts{'cmdline'}   = $cmdline;
  $inputopts{'type'}      = "";
  $inputopts{'res'}       = "";
  $inputopts{'datasource'}= $opts{'datasource'};
  $inputopts{'case'}      = $opts{'case'};
  $inputopts{'domain'}    = $opts{'domain'};
  $inputopts{'domainpath'}= $opts{'domainpath'};
  $inputopts{'filenames'} = $opts{'filenames'};
  $inputopts{'csmdata'}   = $opts{'csmdata'};

  my $streams = Streams::Template->new( \%inputopts );
  $streams->Read(  $opts{'template'} );
  if ( $opts{'test'} ) {
     $streams->TestFilesExist( "data"   );
     $streams->TestFilesExist( "domain" );
  }
  $streams->Write( $opts{'outfile'} );
