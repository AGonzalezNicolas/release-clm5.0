#===============================================================================
# The following always need to be set
# SPMD             Whether to build in SPMD mode or not.  [values TRUE FALSE]
# SMP              Set to TRUE to enable building in SMP mode (uses OpenMP).  
# USER_CPPDEFS     CPP definitions (non platform dependent)
#
# The following can be optionally set
# USER_LIB_MPI       Allow user to override the default 
# USER_LIB_NETCDF    Allow user to override the default 
# USER_LAPACK_LIBDIR Allow user to override the default 
# USER_ESMF_LIBDIR   Allos user to override the default
# USER_LINKER        Allow user to override the default
#
# USER_INC_MPI       Allow user to override the default 
# USER MPI_LIB_NAME  Allow user to override the default
# USER_INC_NETCDF    Allow user to override the default 
# USER_MOD_NETCDF    Allow user to override the default 
# USER_FC            Allow user to override the default Fortran compiler specified in Makefile.
# USER_CC            Allow user to override the default C compiler specified in Makefile (linux only).
# USER_CFLAGS        Additional C compiler flags that the user wishes to set.
# USER_FFLAGS        Additional Fortran compiler flags that the user wishes to set.
# USER_LDLAGS        Additional load flags that the user wishes to set.
# F_OPTIMIZATION_OVERRIDE
#                    Use this to replace default Fortran compiler optimization.  
#===============================================================================

# Note that CPPDEFS is set in Macros.cppdefs
CPPDEFS += -DLINUX -DSEQ_$(FRAMEWORK) -DFORTRANUNDERSCORE

ifeq ($(compile_threaded), true)
   CPPDEFS += -DTHREADED_PTHREADS
endif

FC            := ifort
CC            := icc
NETCDF_PATH   := $(NETCDF)
INC_NETCDF    := $(NETCDF_PATH)/include
LIB_NETCDF    := $(NETCDF_PATH)/lib
MOD_NETCDF    := $(NETCDF_PATH)/include
INC_MPI       := $(MPICH)/include
LIB_MPI       := $(MPICH)/lib
MPI_LIB_NAME  := 
INC_PNETCDF   :=
LIB_PNETCDF   := 
LAPACK_LIBDIR := 

CFLAGS        := $(CPPDEFS) -m64 -ftz -g
FIXEDFLAGS    := 
FREEFLAGS     := 
FFLAGS        := $(CPPDEFS) -g -132 -fp-model precise -convert big_endian -assume byterecl -ftz -traceback
SPEC_FFLAGS   := $(FFLAGS) -O0
FFLAGS_OPT    := -O2
LDFLAGS       := -m64
AR            := ar
MOD_SUFFIX    := mod

#===============================================================================
# Override with user settings
#===============================================================================

ifneq ($(strip $(USER_FC)),)
   FC := $(USER_FC)
endif
ifneq ($(strip $(USER_CC)),)
   CC := $(USER_CC)
endif
ifneq ($(strip $(USER_INC_NETCDF)),)
   INC_NETCDF := $(USER_INC_NETCDF)
endif
ifneq ($(strip $(USER_MOD_NETCDF)),)
   MOD_NETCDF := $(USER_MOD_NETCDF)  
endif
ifneq ($(strip $(USER_INC_PNETCDF)),)
   INC_PNETCDF := $(USER_INC_PNETCDF)
endif
ifneq ($(strip $(USER_INC_MPI)),)
   INC_MPI := $(USER_INC_MPI)
endif

#===============================================================================
# Set include paths (needed after override for any model specific builds below)
#===============================================================================

INCLDIR := -I. 
ifneq ($(strip $(INC_NETCDF)),)
INCLDIR += -I$(INC_NETCDF)
endif
ifneq ($(strip $(MOD_NETCDF)),)
INCLDIR += -I$(MOD_NETCDF)
endif
ifneq ($(strip $(INC_MPI)),)
INCLDIR += -I$(INC_MPI)
endif 
ifneq ($(strip $(INC_PNETCDF)),)
INCLDIR += -I$(INC_PNETCDF)
endif

#===============================================================================
# Set model and other specific options
# NOTE - all CPPDEFS options must be defined before this point
#===============================================================================

# Set user override of default Fortran compiler optimizations
ifeq ($(DEBUG),TRUE)
  #FFLAGS       += -CB -CU -check pointers -fpe0 -ftz
  #SPEC_FFLAGS  += -CB -CU -check pointers -fpe0 -ftz
  FFLAGS       += -CB
  SPEC_FFLAGS  += -CB
else
  FFLAGS += $(FFLAGS_OPT)
endif

ifeq ($(compile_threaded), true)
  FFLAGS       += -openmp
  SPEC_FFLAGS  += -openmp
  CFLAGS       += -openmp
  LDFLAGS      += -openmp
endif

# For compiling and linking with external ESMF.
# If linking to external ESMF library then include esmf.mk to provide the macros:
# ESMF_F90COMPILEPATHS
# ESMF_F90LINKPATHS
# ESMF_F90LINKRPATHS
# ESMF_F90ESMFLINKLIBS
ifneq ($(strip $(ESMF_LIBDIR)),)
  include $(ESMF_LIBDIR)/esmf.mk
  FFLAGS  += $(ESMF_F90COMPILEPATHS)
  LDFLAGS += $(ESMF_F90LINKPATHS) $(ESMF_F90LINKRPATHS) $(ESMF_F90ESMFLINKLIBS)
endif

# Append user defined compiler and load flags to Makefile defaults
CFLAGS   += $(USER_CFLAGS)
FFLAGS   += $(USER_FFLAGS)
LDFLAGS  += $(USER_LDFLAGS)



