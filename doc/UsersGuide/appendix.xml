<appendix id="editing_templates">
<title>Editing Template Files Before Configure</title>
<para>
The last kind of customization that you can do for a case, before configure is run 
is to edit the templates. The clm template is in
<filename>models/lnd/clm/bld/clm.cpl7.template</filename>, the datm template is
in <filename>models/atm/datm/bld/datm.cpl7.template</filename>, and the driver templates
are in the <filename>models/drv/bld</filename> directory and are named:
<filename>ccsm.template</filename> and <filename>cpl.template</filename>. When a case is
created they are also copied to the <filename>Tools/Templates</filename> directory 
underneath your case. If you want to make changes that will impact all your cases, you
should edit the template files under the <filename>models</filename> directory, but
if you want to make a change ONLY for a particular case you should edit the template
under that specific case.
</para>
<note>
<para>
Editing the template files is NOT for the faint of heart! We recommend this ONLY for
experts! It's difficult to do because the template is a script that actually creates 
another script. So part of the script is echoing the script to be created and part of
it is a script that is run when "configure -case" is run. As a result any variables 
in the part of the script that is being echoed have to be escaped like this:
<screen>
\$VARIABLE
</screen>
But, in other parts of the script that is run, you can NOT escape variables. So you 
need to understand if you are in a part of the script that is echoing the script to
be created, or in the part of the script that is actually run.
</para>
</note>
<para>
If you can customize your case using: compsets, <filename>env_*.xml</filename> variables,
or a user namelist, as outlined in <xref linkend="customize"></xref> you should do so.
The main reason to actually edit the template files, is if you are in a situation where
the template aborts when you try it run it when "configure -case" is run. The other
reason to edit the template is if you are CLM developer and need to make adjustments
to the template because of code or script updates.
</para>
<para>
The outline of the clm template is as follows:
<screen>
# set up options for clm configure and then run clm configure
$CODEROOT/lnd/clm*/bld/configure &lt;options&gt;
# set up options for clm build-namelist and then run clm build-namelist
$CODEROOT/lnd/clm*/bld/build-namelist &lt;options&gt;
# echo the $CASEBUILD/clm.buildnml.csh script out
cat &gt;! $CASEBUILD/clm.buildnml.csh &lt;&lt; EOF1
# NOTE: variables in this section must be escaped
EOF1
# Remove temporary namelist files

# echo the $CASEBUILD/clm.buildexe.csh script out
cat &gt; $CASEBUILD/clm.buildexe.csh &lt;&lt;EOF2
# NOTE: variables in this section must be escaped
EOF2
# Remove temporary configure files
</screen>
</para>
</appendix>

<appendix id="runinit_ibm.csh">
<title>Using the Script <filename>runinit_ibm.csh</filename> to both Run &clm; and
Interpolate Datasets</title>
<para>
The script <filename>runinit_ibm.csh</filename> can be used on the
<acronym>NCAR</acronym> bluefire machine to run &clm; to create a template file and
then run <command>interpinic</command> and do this over a variety of standard
resolutions. By default it is setup to loop over the following resolutions:
<screen width="99">
foreach res ( "1.9x2.5" "10x15" "4x5" "0.9x1.25" "2.5x3.33" "0.47x0.63" "48x96" )
</screen>
It is also only setup to run &clmcn; and only particular masks for each resolution.
But, the script can be modified by the user to run over whatever list you would like it
to. It is also hooked up to the &buildnml; XML database, so will only use the
datasets that are part of the database, see <xref linkend="adding_files"></xref>
to see how to add files to the database. The script runs &clm; only using OpenMP
threading and as such can be run interactively, but it can also be submitted to the
batch que.
</para>
</appendix>

<appendix id="testing">
<title>Scripts for testing &clm;</title>

<para>
Technically, you could use the customization we gave in <xref linkend="customize"></xref>
to test various configuration and namelist options for &clm;. Sometimes, it's also
useful to have automated tests though to test that restarts give exactly the same 
results as without a restart. It's also useful to have automated tests to run over a
wide variety of configurations, resolutions, and namelist options. To do that we have
several different types of scripts set up to make running comprehensive testing of
&clm; easy. There are two types of testing scripts for &clm;. The first are the &ccsm;
test scripts, which utilize the <command>create_newcase</command> scripts that we
shown how to use in this User's Guide. The second are a set of stand-alone scripts that
use the &clm; &configure; and &buildnml; scripts to build and test the model as well as
testing the &clm; tools as well. Below we will 
</para>

<sect1 id="ccsm_testing">
<title>Testing &clm; Using the &ccsm; Test Scripts</title>

<para>
<screen width="99">
> cd scripts
> create_test -testname ERI.f19_g16.I1850CN.bluefire
</screen>
<screen width="99">
> cd scripts
> create_test_suite -input_list ccsm_utils/Testlists/bluefire.clm.auxtest
> cs.submit.$id.bluefire
> cs.status.$id
</screen>
</para>
</sect1>

<sect1 id="clm_standalone_testing">
<title>Testing &clm; Using the &clm; Stand-Alone Testing Scripts</title>

<para>
To submit a suite of stand-alone tests to the batch que:
<screen width="99">
> cd models/lnd/clm/test/system
> test_driver.sh
</screen>
You can also run tests interactively:
<screen width="99">
> cd models/lnd/clm/test/system
> test_driver.sh -i
</screen>
</para>
</sect1>

</appendix>
